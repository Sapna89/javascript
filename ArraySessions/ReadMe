Callback function for array.sort()
----------------------------------

const coursesObj = [
    {id:1, name:'sapna', sal:100},
    {id:2, name:'naveen', sal:10},
    {id:3, name:'mimi', sal:1},
];
//arr.sort([compareFunction])
//compareFunction Optional
// Specifies a function that defines the sort order. If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value.
// firstEl
// The first element for comparison.
// secondEl
// The second element for comparison.
// If compareFunction(a, b) returns less than 0, sort a to an index lower than b (i.e. a comes first).
// If compareFunction(a, b) returns 0, leave a and b unchanged with respect to each other, but sorted with respect to all different elements. Note: the ECMAscript standard does not guarantee this behavior, thus, not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.
// If compareFunction(a, b) returns greater than 0, sort b to an index lower than a (i.e. b comes first).
// compareFunction(a, b) must always return the same value when given a specific pair of elements a and b as its two arguments. If inconsistent results are returned, then the sort order is undefined.
coursesObj.sort(function(a,b){//refer ascii table
    if (a.name < b.name) return -1;
    if (a.name > b.name) return 1;
    return 0;
});

/*
Objects can be sorted, given the value of one of their properties.

var items = [
  { name: 'Edward', value: 21 },
  { name: 'Sharpe', value: 37 },
  { name: 'And', value: 45 },
  { name: 'The', value: -12 },
  { name: 'Magnetic', value: 13 },
  { name: 'Zeros', value: 37 }
];

// sort by value
items.sort(function (a, b) {
  return a.value - b.value;
});

// sort by name
items.sort(function(a, b) {
  var nameA = a.name.toUpperCase(); // ignore upper and lowercase
  var nameB = b.name.toUpperCase(); // ignore upper and lowercase
  if (nameA < nameB) {
    return -1;
  }
  if (nameA > nameB) {
    return 1;
  }

  // names must be equal
  return 0;
});
===========================

var stringArray = ['Blue', 'Humpback', 'Beluga'];
var numericStringArray = ['80', '9', '700'];
var numberArray = [40, 1, 5, 200];
var mixedNumericArray = ['80', '9', '700', 40, 1, 5, 200];

function compareNumbers(a, b) {
  return a - b;
}

console.log('stringArray:', stringArray.join());
console.log('Sorted:', stringArray.sort());

console.log('numberArray:', numberArray.join());
console.log('Sorted without a compare function:', numberArray.sort());
console.log('Sorted with compareNumbers:', numberArray.sort(compareNumbers));

console.log('numericStringArray:', numericStringArray.join());
console.log('Sorted without a compare function:', numericStringArray.sort());
console.log('Sorted with compareNumbers:', numericStringArray.sort(compareNumbers));

console.log('mixedNumericArray:', mixedNumericArray.join());
console.log('Sorted without a compare function:', mixedNumericArray.sort());
console.log('Sorted with compareNumbers:', mixedNumericArray.sort(compareNumbers));

This example produces the following output. As the output shows, when a compare function is used, numbers sort correctly whether they are numbers or numeric strings.
-------------------------------------------
stringArray: Blue,Humpback,Beluga
Sorted: Beluga,Blue,Humpback

numberArray: 40,1,5,200
Sorted without a compare function: 1,200,40,5
Sorted with compareNumbers: 1,5,40,200

numericStringArray: 80,9,700
Sorted without a compare function: 700,80,9
Sorted with compareNumbers: 9,80,700

mixedNumericArray: 80,9,700,40,1,5,200
Sorted without a compare function: 1,200,40,5,700,80,9
Sorted with compareNumbers: 1,5,9,40,80,200,700

==================================
Sorting non-ASCII characters
----------------------------
var items = ['réservé', 'premier', 'communiqué', 'café', 'adieu', 'éclair'];
items.sort(function (a, b) {
  return a.localeCompare(b);
});

// items is ['adieu', 'café', 'communiqué', 'éclair', 'premier', 'réservé']
*************************************************************************************************

Array Methods used so far:
--------------------------
1. numbers.every(function(value){/*your Code goes here*/});
2. numbers.filter(function(value){/*your Code goes here*/});
3. numbers.pop();
4. numbers.push();
5. numbers.slice();
6. numbers.some();
7. numbers.sort(function(a, b){/*your Code goes here*/});
8. numbers.splice();
9. numbers.unshift();
10. numbers.join(-);
11. numbers.split(' ');
12. numbers.reverse();
13. numbers.map();
14. numbers.reduce();

===================================
All the functions of number array (29 functions with one length property)
---------------------------------
numbers.concat();
numbers.copyWithin();
numbers.entries();//Returns an iterable of key, value pairs for every entry in the array
numbers.every(callbackfn);
numbers.fill();
numbers.filter(callbackfn);
numbers.find();//Returns the value of the first element in the array where predicate is true, and undefined otherwise.
numbers.findIndex();//Returns the index of the first element in the array where predicate is true, and -1 otherwise.
numbers.forEach(callbackfn);
numbers.includes();
numbers.indexOf();
numbers.join();
numbers.keys();//Returns an iterable of keys in the array
numbers.lastIndexOf();
numbers.length;
numbers.map(callbackfn);
numbers.pop();
numbers.push();
numbers.reduce(callbackfn);
numbers.reduceRight(callbackfn);
numbers.reverse();
numbers.shift();
numbers.slice();
numbers.some(callbackfn);
numbers.sort(compareFn(a,b));
numbers.splice();
numbers.toLocaleString();
numbers.toString();
numbers.unshift();
numbers.values();//return IterableIterator

